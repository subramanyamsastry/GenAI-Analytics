I need a React.js single-page application (SPA) that serves as a Data Query Dashboard Prototype for a Gen AI Analytics tool. The application should allow users to input natural language queries, simulate AI-powered query processing, and display results in a visual format. Here are the detailed requirements:

1. Core Features:
Natural Language Query Input: A text field where users can type their queries (e.g., "Show me sales trends for the last quarter").

AI-powered Suggestions: As users type, provide mock AI suggestions (static list of query examples).

Query Processing Simulation: Simulate AI interaction with a loading state before displaying results.

Results Display: Display query results using mock data in a chart (use Recharts or Chart.js).

Query History Section: Store and display previous queries submitted.

Loading & Error States: Show loading animation while processing and handle errors gracefully.

2. State Management:
Use Redux for global state management.

Create actions and reducers to handle:

Query submission

Query processing state

Result storage & display

3. UI & Design Considerations:
Use Tailwind CSS or Material-UI for styling.

Ensure responsive design for both desktop and mobile users.

Modern, intuitive UI (refer to Behance/Dribbble for design inspiration).

4. Technical Stack:
React.js (frontend framework)

Redux (state management)

Recharts or Chart.js (data visualization)

Tailwind CSS or Material-UI (styling)

5. Hosting & Deployment:
Generate a GitHub repository with clean, structured code.

Deploy the application on Netlify or Vercel.

Provide a README with:

Setup instructions

Features overview

How to run the project locally

6. Code Quality & Best Practices:
Follow component-based architecture for better maintainability.

Ensure clean, reusable, and modular code.

Simulate AI interactions creatively (even with static responses).

Expected Output:
A fully functional React-based dashboard prototype that enables users to enter queries, see AI suggestions, process results, and visualize them in a chart with history tracking. The project should be deployed and available via a public GitHub link and a hosted demo link (Netlify/Vercel).